'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { createClient } from '@/lib/supabase/client'
import Link from 'next/link'
import { motion } from 'framer-motion'
import { Dumbbell, Sparkles, Play, Target, BarChart3, Clock, Calendar, Trash2, ArrowLeft, Plus, Filter } from 'lucide-react'
import { SkeletonList } from '@/components/ui/Skeleton'

export default function WorkoutsPage() {
  const router = useRouter()
  const [workouts, setWorkouts] = useState<any[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [isDeleting, setIsDeleting] = useState(false)
  const [isAdmin, setIsAdmin] = useState(false)
  const [currentPage, setCurrentPage] = useState(1)
  const [totalPages, setTotalPages] = useState(1)
  const [hoveredWorkoutId, setHoveredWorkoutId] = useState<string | null>(null)
  const ITEMS_PER_PAGE = 10
  const supabase = createClient()

  // Define fetchWorkouts outside of useEffect so it can be reused
  const fetchWorkouts = async () => {
    try {
      setLoading(true)
      setError(null)

      // Get user
      const { data: { user } } = await supabase.auth.getUser()

      if (!user) {
        throw new Error('Not authenticated')
      }

      // Check admin status
      const { data: profileData } = await supabase
        .from('profiles')
        .select('is_admin')
        .eq('id', user.id)
        .single()

      setIsAdmin(!!profileData?.is_admin)

      // Count total workouts for pagination
      const { count: totalCount, error: countError } = await supabase
        .from('workouts')
        .select('*', { count: 'exact', head: true })

      if (countError) {
        throw countError
      }

      // Calculate total pages
      const calculatedTotalPages = Math.ceil((totalCount || 0) / ITEMS_PER_PAGE)
      setTotalPages(calculatedTotalPages)

      // Fetch workouts with pagination
      const { data, error } = await supabase
        .from('workouts')
        .select('*')
        .order('created_at', { ascending: false })
        .range((currentPage - 1) * ITEMS_PER_PAGE, currentPage * ITEMS_PER_PAGE - 1)

      if (error) {
        throw error
      }

      setWorkouts(data || [])
    } catch (error) {
      console.error('Error fetching workouts:', error)
      setError('Failed to load workouts')
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    fetchWorkouts()
  }, [currentPage])

  const handleDelete = async (e: React.MouseEvent, workoutId: string) => {
    e.stopPropagation(); // Prevent navigation to workout details

    if (confirm('Are you sure you want to delete this workout?')) {
      try {
        // First optimistically update the UI
        setWorkouts(prevWorkouts => prevWorkouts.filter(w => w.id !== workoutId));

        // Then perform the actual deletion
        const response = await fetch(`/api/workouts/delete?id=${workoutId}`, {
          method: 'DELETE',
        });

        if (!response.ok) {
          throw new Error('Failed to delete workout');
        }

        // Refresh the page data to ensure everything is in sync
        setTimeout(() => {
          router.refresh();
        }, 100);
      } catch (error) {
        console.error('Error deleting workout:', error);
        setError('Failed to delete workout');

        // Show error for 3 seconds, then clear it
        setTimeout(() => {
          setError(null);
        }, 3000);

        // Refetch workouts to restore the list
        fetchWorkouts();
      }
    }
  };

  if (loading) {
    return (
      <div className="relative min-h-screen overflow-hidden">
        {/* Background accents */}
        <div className="pointer-events-none absolute inset-0">
          <div className="absolute -top-40 -left-40 h-96 w-96 rounded-full bg-fuchsia-500/20 blur-3xl" />
          <div className="absolute -bottom-40 -right-40 h-96 w-96 rounded-full bg-cyan-400/20 blur-3xl" />
          <div className="absolute inset-0 bg-[radial-gradient(circle_at_top,_rgba(255,255,255,0.08),_transparent_45%)]" />
        </div>

        {/* Header */}
        <div className="relative z-10 p-4 safe-area-top">
          <Link href="/protected/dashboard">
            <button className="flex items-center gap-2 rounded-xl border border-white/10 bg-white/5 px-4 py-2 text-sm text-white/80 backdrop-blur-xl hover:bg-white/10 transition-colors focus-ring">
              <ArrowLeft className="h-4 w-4" />
              Back to Dashboard
            </button>
          </Link>
        </div>

        {/* Main Content */}
        <section className="mx-auto w-full max-w-6xl px-4 sm:px-6 lg:px-8 pb-8 sm:pb-12 lg:pb-20">
          <motion.div
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            className="space-y-6 sm:space-y-8"
          >

            {/* Header Section - Mobile Optimized */}
            <div className="relative overflow-hidden rounded-2xl sm:rounded-3xl border border-white/10 bg-white/5 p-4 sm:p-6 lg:p-8 backdrop-blur-2xl">
              <div className="absolute -right-12 -top-12 h-32 w-32 sm:h-48 sm:w-48 lg:h-64 lg:w-64 rounded-full bg-white/10 blur-2xl" />
              <div className="absolute -bottom-12 -left-12 h-32 w-32 sm:h-48 sm:w-48 lg:h-64 lg:w-64 rounded-full bg-white/10 blur-2xl" />

              <div className="relative">
                <div className="mb-4 sm:mb-6 flex flex-col sm:flex-row sm:items-start sm:justify-between gap-4">
                  <div>
                    <h1 className="text-2xl sm:text-3xl lg:text-4xl font-semibold tracking-tight flex items-center gap-3">
                      <Dumbbell className="h-6 w-6 sm:h-8 sm:w-8 text-fuchsia-400" />
                      Your Workouts
                    </h1>
                    <p className="mt-2 text-sm sm:text-base text-white/70">
                      View and manage your personalized workout history
                    </p>
                  </div>

                  <Link href="/protected/workouts/generate">
                    <button className="btn-touch w-full sm:w-auto rounded-xl border border-white/10 bg-gradient-to-r from-fuchsia-500/20 to-cyan-400/20 px-4 sm:px-5 py-3 text-sm font-medium text-white/90 backdrop-blur-xl hover:bg-white/10 transition-colors focus-ring flex items-center justify-center gap-2">
                      <Plus className="h-4 w-4" />
                      Generate New
                    </button>
                  </Link>
                </div>
              </div>
            </div>

            {/* Workouts List Skeleton */}
            <div className="rounded-2xl border border-white/10 bg-white/5 backdrop-blur-xl overflow-hidden">
              <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between p-4 sm:p-6 border-b border-white/10 gap-4">
                <div className="flex items-center gap-2">
                  <Target className="h-5 w-5 text-fuchsia-400" />
                  <span className="text-base sm:text-lg font-medium text-white/90">Workout History</span>
                  <span className="text-xs text-white/50 bg-white/10 px-2 py-1 rounded-full">
                    {workouts.length}
                  </span>
                </div>

                <div className="flex items-center gap-2">
                  {isAdmin && (
                    <div className="text-xs text-white/50 bg-white/10 px-2 py-1 rounded-full">
                      Admin Mode
                    </div>
                  )}
                  <div className="text-xs text-white/50">
                    Page {currentPage} of {totalPages}
                  </div>
                </div>
              </div>

              <div className="p-4 sm:p-6">
                <SkeletonList count={6} />
              </div>
            </div>
          </motion.div>
        </section>
      </div>
    )
  }

  return (
    <div className="relative min-h-screen overflow-hidden">
      {/* Background accents */}
      <div className="pointer-events-none absolute inset-0">
        <div className="absolute -top-40 -left-40 h-96 w-96 rounded-full bg-fuchsia-500/20 blur-3xl" />
        <div className="absolute -bottom-40 -right-40 h-96 w-96 rounded-full bg-cyan-400/20 blur-3xl" />
        <div className="absolute inset-0 bg-[radial-gradient(circle_at_top,_rgba(255,255,255,0.08),_transparent_45%)]" />
      </div>

      {/* Header */}
      <div className="relative z-10 p-4 safe-area-top">
        <Link href="/protected/dashboard">
          <button className="flex items-center gap-2 rounded-xl border border-white/10 bg-white/5 px-4 py-2 text-sm text-white/80 backdrop-blur-xl hover:bg-white/10 transition-colors focus-ring">
            <ArrowLeft className="h-4 w-4" />
            Back to Dashboard
          </button>
        </Link>
      </div>

      {/* Main Content */}
      <section className="mx-auto w-full max-w-6xl px-4 sm:px-6 lg:px-8 pb-8 sm:pb-12 lg:pb-20">
        <motion.div
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="space-y-6 sm:space-y-8"
        >
          {/* Header Section - Mobile Optimized */}
          <div className="relative overflow-hidden rounded-2xl sm:rounded-3xl border border-white/10 bg-white/5 p-4 sm:p-6 lg:p-8 backdrop-blur-2xl">
            <div className="absolute -right-12 -top-12 h-32 w-32 sm:h-48 sm:w-48 lg:h-64 lg:w-64 rounded-full bg-white/10 blur-2xl" />
            <div className="absolute -bottom-12 -left-12 h-32 w-32 sm:h-48 sm:w-48 lg:h-64 lg:w-64 rounded-full bg-white/10 blur-2xl" />

            <div className="relative">
              <div className="mb-4 sm:mb-6 flex flex-col sm:flex-row sm:items-start sm:justify-between gap-4">
                <div>
                  <h1 className="text-2xl sm:text-3xl lg:text-4xl font-semibold tracking-tight flex items-center gap-3">
                    <Dumbbell className="h-6 w-6 sm:h-8 sm:w-8 text-fuchsia-400" />
                    Your Workouts
                  </h1>
                  <p className="mt-2 text-sm sm:text-base text-white/70">
                    View and manage your personalized workout history
                  </p>
                </div>

                <Link href="/protected/workouts/generate">
                  <button className="btn-touch w-full sm:w-auto rounded-xl border border-white/10 bg-gradient-to-r from-fuchsia-500/20 to-cyan-400/20 px-4 sm:px-5 py-3 text-sm font-medium text-white/90 backdrop-blur-xl hover:bg-white/10 transition-colors focus-ring flex items-center justify-center gap-2">
                    <Plus className="h-4 w-4" />
                    Generate New
                  </button>
                </Link>
              </div>
            </div>
          </div>

          {/* Workouts List - Mobile Optimized */}
          <div className="rounded-2xl border border-white/10 bg-white/5 backdrop-blur-xl overflow-hidden">
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between p-4 sm:p-6 border-b border-white/10 gap-4">
              <div className="flex items-center gap-2">
                <Target className="h-5 w-5 text-fuchsia-400" />
                <span className="text-base sm:text-lg font-medium text-white/90">Workout History</span>
                <span className="text-xs text-white/50 bg-white/10 px-2 py-1 rounded-full">
                  {workouts.length}
                </span>
              </div>

              <div className="flex items-center gap-2">
                {isAdmin && (
                  <div className="text-xs text-white/50 bg-white/10 px-2 py-1 rounded-full">
                    Admin Mode
                  </div>
                )}
                <div className="text-xs text-white/50">
                  Page {currentPage} of {totalPages}
                </div>
              </div>
            </div>
            
            <div className="p-4 sm:p-6">
              {workouts.length > 0 ? (
                <div className="space-y-3 sm:space-y-4">
                  {workouts.map((workout, index) => (
                    <motion.div
                      key={workout.id}
                      initial={{ opacity: 0, y: 8 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ delay: index * 0.05 }}
                      className="group"
                    >
                      <Link href={`/protected/workouts/${workout.id}`}>
                        <div className="rounded-xl border border-white/10 bg-white/5 backdrop-blur-xl p-4 hover:bg-white/10 transition-all duration-200 focus-ring">
                          <div className="flex flex-col sm:flex-row sm:items-start sm:justify-between gap-3">
                            <div className="flex-1 min-w-0">
                              <div className="flex items-start justify-between mb-2">
                                <div className="flex-1 min-w-0">
                                  <h3 className="font-semibold text-white/90 truncate pr-2">
                                    Workout {new Date(workout.created_at).toLocaleDateString()}
                                  </h3>
                                  <p className="text-sm text-white/60 truncate">
                                    {workout.workout_focus?.charAt(0).toUpperCase() + workout.workout_focus?.slice(1)}
                                  </p>
                                </div>
                                <div className="flex-shrink-0">
                                  <div className="w-2 h-2 rounded-full bg-fuchsia-400 group-hover:bg-cyan-400 transition-colors" />
                                </div>
                              </div>

                              <div className="flex flex-wrap items-center gap-3 sm:gap-6 text-xs sm:text-sm text-white/50 mt-3">
                                <div className="flex items-center gap-1">
                                  <Target className="h-3 w-3" />
                                  <span>{workout.workout_data.exercises?.length || 0} exercises</span>
                                </div>
                                <div className="flex items-center gap-1">
                                  <Clock className="h-3 w-3" />
                                  <span>{workout.total_duration_minutes} min</span>
                                </div>
                                <div className="flex items-center gap-1">
                                  <Calendar className="h-3 w-3" />
                                  <span>{new Date(workout.created_at).toLocaleDateString()}</span>
                                </div>
                              </div>
                            </div>

                            {/* Mobile Action Buttons */}
                            <div className="flex items-center gap-2 sm:hidden">
                              <Link
                                href={`/protected/workouts/${workout.id}`}
                                className="btn-touch flex items-center justify-center w-8 h-8 rounded-lg bg-white/10 hover:bg-white/20 transition-colors"
                                onClick={(e) => e.stopPropagation()}
                              >
                                <Play className="h-4 w-4 text-white/60" />
                              </Link>
                              <button
                                onClick={(e) => handleDelete(e, workout.id)}
                                disabled={isDeleting}
                                className="btn-touch flex items-center justify-center w-8 h-8 rounded-lg bg-red-500/10 hover:bg-red-500/20 transition-colors disabled:opacity-50"
                              >
                                <Trash2 className="h-4 w-4 text-red-400" />
                              </button>
                            </div>
                          </div>
                        </div>
                      </Link>
                    </motion.div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-8 sm:py-12">
                  <Target className="h-12 w-12 sm:h-16 sm:w-16 text-white/20 mx-auto mb-4" />
                  <h3 className="text-lg sm:text-xl font-medium text-white/90 mb-2">
                    No workouts yet
                  </h3>
                  <p className="text-sm text-white/60 mb-6 max-w-md mx-auto">
                    Generate your first personalized workout to get started on your fitness journey.
                  </p>
                  <Link
                    href="/protected/workouts/generate"
                    className="btn-touch inline-flex items-center gap-2 rounded-xl border border-white/10 bg-gradient-to-r from-fuchsia-500/20 to-cyan-400/20 px-6 py-3 text-sm font-medium text-white/90 backdrop-blur-xl hover:bg-white/10 transition-colors focus-ring"
                  >
                    <Sparkles className="h-4 w-4" />
                    Generate First Workout
                  </Link>
                </div>
              )}
            </div>
            
            {/* Pagination - Mobile Optimized */}
            {totalPages > 1 && (
              <div className="flex items-center justify-between p-4 sm:p-6 border-t border-white/10">
                <button
                  onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}
                  disabled={currentPage === 1}
                  className="btn-touch flex items-center gap-2 rounded-xl border border-white/10 bg-white/5 px-3 sm:px-4 py-2 text-sm text-white/80 hover:bg-white/10 disabled:opacity-50 disabled:cursor-not-allowed transition-colors focus-ring"
                >
                  <ArrowLeft className="h-4 w-4" />
                  <span className="hidden sm:inline">Previous</span>
                </button>

                <div className="flex items-center gap-2">
                  <span className="text-sm text-white/60">
                    Page {currentPage} of {totalPages}
                  </span>
                </div>

                <button
                  onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}
                  disabled={currentPage === totalPages}
                  className="btn-touch flex items-center gap-2 rounded-xl border border-white/10 bg-white/5 px-3 sm:px-4 py-2 text-sm text-white/80 hover:bg-white/10 disabled:opacity-50 disabled:cursor-not-allowed transition-colors focus-ring"
                >
                  <span className="hidden sm:inline">Next</span>
                  <ArrowLeft className="h-4 w-4 rotate-180" />
                </button>
              </div>
            )}
          </div>
        </motion.div>
      </section>
    </div>
  )
}
