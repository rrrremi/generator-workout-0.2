"use client";

import { useState } from 'react';
import Button from '@/components/ui/Button';

export default function Profile() {
  const [profile, setProfile] = useState({
    name: 'John Doe',
    email: 'john.doe@example.com',
    age: 30,
    weight: 75, // kg
    height: 180, // cm
    fitnessGoal: 'build-muscle',
    fitnessLevel: 'intermediate',
    preferredWorkoutDays: ['monday', 'wednesday', 'friday']
  });
  
  const [isEditing, setIsEditing] = useState(false);
  const [formData, setFormData] = useState({...profile});
  
  const fitnessGoals = [
    { id: 'lose-weight', label: 'Lose Weight' },
    { id: 'build-muscle', label: 'Build Muscle' },
    { id: 'improve-endurance', label: 'Improve Endurance' },
    { id: 'maintain', label: 'Maintain Fitness' }
  ];
  
  const fitnessLevels = [
    { id: 'beginner', label: 'Beginner' },
    { id: 'intermediate', label: 'Intermediate' },
    { id: 'advanced', label: 'Advanced' }
  ];
  
  const weekdays = [
    { id: 'monday', label: 'Monday' },
    { id: 'tuesday', label: 'Tuesday' },
    { id: 'wednesday', label: 'Wednesday' },
    { id: 'thursday', label: 'Thursday' },
    { id: 'friday', label: 'Friday' },
    { id: 'saturday', label: 'Saturday' },
    { id: 'sunday', label: 'Sunday' }
  ];
  
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };
  
  const handleCheckboxChange = (e) => {
    const { name, checked } = e.target;
    
    setFormData(prev => {
      if (checked) {
        return {
          ...prev,
          preferredWorkoutDays: [...prev.preferredWorkoutDays, name]
        };
      } else {
        return {
          ...prev,
          preferredWorkoutDays: prev.preferredWorkoutDays.filter(day => day !== name)
        };
      }
    });
  };
  
  const handleSubmit = (e) => {
    e.preventDefault();
    setProfile(formData);
    setIsEditing(false);
    
    // In a real app, you would save the profile to the backend here
    console.log('Profile updated:', formData);
  };
  
  return (
    <div className="max-w-4xl mx-auto py-8 px-4">
      <h1 className="text-3xl font-bold mb-8">Your Profile</h1>
      
      <div className="content-card">
        {!isEditing ? (
          <>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
              <div>
                <h2 className="text-2xl font-semibold mb-4">Personal Information</h2>
                <div className="space-y-3">
                  <div>
                    <span className="font-medium">Name:</span> {profile.name}
                  </div>
                  <div>
                    <span className="font-medium">Email:</span> {profile.email}
                  </div>
                  <div>
                    <span className="font-medium">Age:</span> {profile.age} years
                  </div>
                  <div>
                    <span className="font-medium">Weight:</span> {profile.weight} kg
                  </div>
                  <div>
                    <span className="font-medium">Height:</span> {profile.height} cm
                  </div>
                </div>
              </div>
              
              <div>
                <h2 className="text-2xl font-semibold mb-4">Fitness Information</h2>
                <div className="space-y-3">
                  <div>
                    <span className="font-medium">Fitness Goal:</span> {
                      fitnessGoals.find(goal => goal.id === profile.fitnessGoal)?.label
                    }
                  </div>
                  <div>
                    <span className="font-medium">Fitness Level:</span> {
                      fitnessLevels.find(level => level.id === profile.fitnessLevel)?.label
                    }
                  </div>
                  <div>
                    <span className="font-medium">Preferred Workout Days:</span>
                    <div className="ml-4">
                      {weekdays
                        .filter(day => profile.preferredWorkoutDays.includes(day.id))
                        .map(day => (
                          <div key={day.id}>{day.label}</div>
                        ))
                      }
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            <Button onClick={() => setIsEditing(true)}>
              Edit Profile
            </Button>
          </>
        ) : (
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h2 className="text-2xl font-semibold mb-4">Personal Information</h2>
                
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium mb-1">Name</label>
                    <input
                      type="text"
                      name="name"
                      value={formData.name}
                      onChange={handleChange}
                      className="w-full p-2 border border-gray-300 rounded"
                      required
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium mb-1">Email</label>
                    <input
                      type="email"
                      name="email"
                      value={formData.email}
                      onChange={handleChange}
                      className="w-full p-2 border border-gray-300 rounded"
                      required
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium mb-1">Age</label>
                    <input
                      type="number"
                      name="age"
                      value={formData.age}
                      onChange={handleChange}
                      min="16"
                      max="100"
                      className="w-full p-2 border border-gray-300 rounded"
                      required
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium mb-1">Weight (kg)</label>
                    <input
                      type="number"
                      name="weight"
                      value={formData.weight}
                      onChange={handleChange}
                      min="30"
                      max="250"
                      step="0.1"
                      className="w-full p-2 border border-gray-300 rounded"
                      required
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium mb-1">Height (cm)</label>
                    <input
                      type="number"
                      name="height"
                      value={formData.height}
                      onChange={handleChange}
                      min="100"
                      max="250"
                      className="w-full p-2 border border-gray-300 rounded"
                      required
                    />
                  </div>
                </div>
              </div>
              
              <div>
                <h2 className="text-2xl font-semibold mb-4">Fitness Information</h2>
                
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium mb-1">Fitness Goal</label>
                    <select
                      name="fitnessGoal"
                      value={formData.fitnessGoal}
                      onChange={handleChange}
                      className="w-full p-2 border border-gray-300 rounded"
                      required
                    >
                      {fitnessGoals.map(goal => (
                        <option key={goal.id} value={goal.id}>
                          {goal.label}
                        </option>
                      ))}
                    </select>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium mb-1">Fitness Level</label>
                    <select
                      name="fitnessLevel"
                      value={formData.fitnessLevel}
                      onChange={handleChange}
                      className="w-full p-2 border border-gray-300 rounded"
                      required
                    >
                      {fitnessLevels.map(level => (
                        <option key={level.id} value={level.id}>
                          {level.label}
                        </option>
                      ))}
                    </select>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium mb-1">Preferred Workout Days</label>
                    <div className="space-y-2">
                      {weekdays.map(day => (
                        <label key={day.id} className="flex items-center">
                          <input
                            type="checkbox"
                            name={day.id}
                            checked={formData.preferredWorkoutDays.includes(day.id)}
                            onChange={handleCheckboxChange}
                            className="mr-2"
                          />
                          <span>{day.label}</span>
                        </label>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            <div className="flex space-x-4">
              <Button type="submit">
                Save Changes
              </Button>
              <Button 
                type="button" 
                variant="outline" 
                onClick={() => {
                  setFormData({...profile});
                  setIsEditing(false);
                }}
              >
                Cancel
              </Button>
            </div>
          </form>
        )}
      </div>
    </div>
  );
}
